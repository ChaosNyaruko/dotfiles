# Comparisons
case-sensitive comparisons
==? ==# 
:h expr4
never use ==

# Functions
unscoped function should start with a capital letter
:h :call
:h E124
:h return

# Function Arguments
echom a:name
your always need to prefix those arguments with `a:`
## Varargs
function Varg(...)
    a:0 number of extra arguments
    a:1
    a:2
    a:000 a list containing all the extra arguments

can't use echom with a list, but seems testing is passed.
can't reassign argument variables

:h function-argument
:h local-variables

# Numbers
recommend avoiding the use of octal numbers when possible
:h Float
:h floating-point-precision

# Strings
Vim's `+` operator is only for Numbers(not including Floats), not for Strings.
String concatenation operator `.`

Two single quotes in a row is the **only** sequence that has special meaning in a literal string.

:h expr-quote
:h i_CTRL-V
:h literal-string

# String Functions
strlen("foo")
    notice: len()
:h split()
:h join()
split and join can be paired to great effect.
tolower()
toupper()
:h functions

# Execute
```
:execute "rightbelow vsplit " . bufname("#")
```
In most programming languages the use of such an "eval" construct to evaluate strings as program code is frowned upon (to put it lightly). Vimscript's execute command doesn't have the same stigma for two reasons.

:h execute
:h rightbelow
:h leftabove
:h split
:h vsplit

# Normal
normal! always use `!` 
normal(!) doesn't take/parse special characters such as <cr> etc.
:h normal
## Extra Credit
:h helpgrep

# Execute Normal!
```
:execute "normal! gg/foo\<cr>dd"
```
:h expr-quote

know how to using string escapes to pass special characters to normal! with execute

# Basic Regular Expressions
[regex](https://learncodethehardway.org/)
vanilla Vim/Emacs
:help magic
:help pattern-overview
:help :match
:match none
:match group /pattern/
:h nohlsearch
:nohls vs :set nohls
